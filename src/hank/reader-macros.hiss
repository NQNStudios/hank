(def-reader-macro "->" (start stream)
    `(funcall ,(read-symbol "" stream)))

(def-reader-macro "==" (start stream)
    (let (knot-name
                (read-symbol "" stream)
            _
                (HStream:take-line stream)
            knot-body
                (read-all (first (HStream:take-until stream ["=="] nil nil t))))
    
        // Define the knot's function at READ-TIME
        (eval (print `(defun ,knot-name () ,@knot-body (quit))))
        nil))

(defun read-output (start stream)
    `(output ,(HStream:take-line stream "rl")))

(set-default-read-function read-output)