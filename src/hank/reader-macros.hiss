/*
    ['INCLUDE ' => include],
    ['<-' => thread],
    ['->' => divert],
    ['===' => knot],
    ['==' => knot],
    ['=' => stitch],
    ['~' => haxeLine],
    ['```' => haxeBlock],
    ['-' => gather],
    ['*' => choice],
    ['+' => choice],
    ['#' => tag]];

    [] starts choice conditional text
    { } starts a Hiss insertion -- usually for variables
    ( ) starts a Hiss funcall insertion -- equivalent to {()}
    < > starts an alt expression
*/

// ( ) at the start of an output is a label

(defmacro expect (stream function &rest args)
    `(get (call ,stream ,function ,@args) output))

(setq *hank-inline-terminators* '(
    "->"
    "["
    "{"
    "("
    "<"))

(defun read-output (_ stream _)
    ;(print "reading output")
    ;(print "RIGHT BELOW:")
    ;(print (call stream peek-all))
    (list 'output (expect stream take-until (list "\n") t)))

(defun read-divert (_ stream _)
    ;(print "reading divert")
    (call stream drop-whitespace)
    (list 'divert (expect stream take-until-whitespace)))

(defun hank-read-mode ()
    (setq *hiss-readtable* (copy-readtable))
    ; TODO set other read macros
    (set-macro-string "->" read-divert)

    (set-default-read-function read-output))

(defun hiss-read-mode ()
    (set-readtable *hiss-readtable*)
    (set-default-read-function read-symbol))

(hank-read-mode)