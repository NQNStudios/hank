(defun output (&rest parts)
    (call/cc 
        (lambda (cc) 
            (*handle-output*
                (apply + 
                    (map parts eval-output-part))
                cc))))

(defun eval-output-part (part)
    (cond
        ((string? part) part)))

(defstruct choice once-only depth label condition output chosen-count on-chosen)
(defvar *choices* [])
(defvar *labeled-choices* (dict))
(defmacro defchoice (&rest args)
    "Define a new choice and return its id"
    `(let (c (make-choice ,@args)
            label (choice-label c)
            id (length *choices*))
        (print c)
        (push! *choices* c)
        (when label (dict-set! *labeled-choices* label c))
        id))

(defvar *choice-points* [])